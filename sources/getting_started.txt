Getting started with the Zenzero Setup
======================================

This is the equivalent of the ``Hello World`` problem using the multi-chip `zenzero setup <http://ncs.ethz.ch/ncs/internal/manuals-and-how-tos/experiments-with-ncs-vlsi-chips>`_. We want to stimulate neurons 20 to 30 on chip 1 and plot a raster of their response, then map all the events from those neurons to the neurons 20 to 30 on chip 2.

.. figure:: images/zenzero_setup.png
   :align: center
   :width: 745px

   The Zenzero Setup

.. Required Equipment
.. ------------------
.. 
.. - The ExCol Mapper (Daniel_)
.. - AEX boards for monitoring and sequencing spike trains to the chips (Daniel_)
.. - at least 1 IFSLWTA chip consisting of 128 I&F neurons with 32 synapses each (2 non-plastic excitatory, 2 inhibitory, 28 plastic synapses implementing the bistable learning synapse) and optional hard-wired "soft Winner-take-all connectivity
.. - 2 AEX boards

.. - Optional: 1 2DIFWTA (Elisabetta chip) consisting of 64 x 32 I&F, 3 non-plastic synapses per neuron, 1 inhibitory synapse, 2 excitatory synapses
.. - Optional: tmpdiff128 retina on a parallel AER compatible board


Step-by-step tutorial
---------------------

*Note:* This tutorial assumes that you have two ifslwta chips, with or without a retina.

0. Make sur you have the Zenzero setup: http://ncs.ethz.ch/ncs/internal/manuals-and-how-tos/experiments-with-ncs-vlsi-chips. 

1. On a terminal, start the Amda server with:

.. code-block:: bash

   $ python -c import pyAmdaServer; pyAmdaServer.run()

if you get:

``A server is already running...``

don't worry and continue.
    

2. Assuming you have a working setup, download and extract all the files in the `experiment protocol template <http://ncs.ethz.ch/ncs/internal/manuals-and-how-tos/experimental-protocol/experiment-protocol-template/exp_template.zip>`_. Then open your favorite editor and create a python script:

.. code-block:: bash
  
   $ vim multi_chip_tutorial.py

.. 3. The first step is the Setup, i.e. loading the appropriate modules in python and let python know what chips you have. Normally you don't have to modify this. The files tmpdiff64.csv and ifslwta.csv can be found in the pyNCS installation directory. Copy them to ``chipfiles/``. Then run the following lines in ipython or put them in a script:
..    
.. .. code-block:: python
.. 
..   #Import the modules necessary for this tutorial.
..   import pyNCS
..   import numpy as np
..   import scipy as sp
..   import pylab
..   from pyST import *
.. 
.. 
..   #Filenames for pin layout and AER address translation 
..   chipfileRetina='chipfiles/tmpdiff64.csv'
..   chipfile1D='chipfiles/ifslwta.csv'
..   
..   #Create Chip objects. Address Specfication obects are automatically created and available as chip.aerOut and chip.aerIn.
..   retina0=pyNCS.Chip(chipfileRetina, id='retina0', amdaid='')
..   chip0=pyNCS.Chip(chipfile1D, id='ifslwta_0', amdaid='204') #check amdaid
..   chip1=pyNCS.Chip(chipfile1D, id='ifslwta_1', amdaid='209') #check amdaid

3. he first step is the Setup, i.e. loading the appropriate modules in python and let python know what chips you have. Normally you don't have to modify this.You can use the package `pyNCS.Setup <api.html#module-pyNCS.chipsetup>`_ to initialize the chips with their respective Amda-id and Aex-channel info (see `Set the Channel information <set-channel-info>`_). In order to do this you need two setup files which you can directly download, which are also in the experiment protocol package :

    `configuration file <http://ncs.ethz.ch/ncs/internal/manuals-and-how-tos/experiments-with-ncs-vlsi-chips/zenzero.xml>`_ 

    `Setup type configuration file <http://ncs.ethz.ch/ncs/internal/manuals-and-how-tos/experiments-with-ncs-vlsi-chips/zenzero_setuptype.xml>`_ 

The setup is loaded via:

.. code-block:: python

	# load setup for zenzero from local dir
	import pyNCS
	setup= pyNCS.Setup('zenzero_setuptype.xml')
	setup.load( 'zenzero.xml' )
	setup.apply() # this sets default monitor/sequencer via pyST
   
*Remark* : the provided setup file assumes that you have saved the needed chipfiles in the directory ``../chipfiles``

4. We would like to set the biases proir to mapping or stimulating. the `experimental protocal template <http://ncs.ethz.ch/internal/experiments-with-ncs-vlsi-chips/experimental-protocol/experiment_protocol_template.zip`_ has biase settings in the appropriate directory. So the following will set the default biases (parameters) of the neuron
   
.. code-block:: python

  #Set Default Biases
  setup.chip['ifslwta'].loadBiases('biases/defaultBiases_ifslwta')
  setup.chip['ifslwta'].loadBiases('biases/defaultBiases_ifslwta')
   
5. By default, all biases are turned off (zero weight). Set the weight of the excitatory non-plastic AER synapse on with:
   
.. code-block:: python
    
   setup.chip['ifslwta'].bias.nsynstdw0.v=0.62
   setup.chip['ifslwta'].bias.nsynstdw0.v=0.62


.. _set-channel-info:

.. 6. Set the Channel information: the mapper must know on which AEX board the chip is connected to. Using the current mapper setup (as of December 2009), run the following:
..    
.. .. code-block:: python
..      
..      ##ST Channel Addressing object (STcs) for prototyping experiments on a multi-chip system with mapper, 8 Channels, 4 Monitor, 4 Stimulation
..      #Monitoring STcs, 8 Channels. 
..      STcsMon=STChannelAddressing(nChannelBits=[14,15,16],\
..      				stasList=[\
..      				retina0.aerOut,\
..      				chip0.aerOut,\
..      				chip1.aerOut,\
..      				retina0.aerOut,\
..      				retina0.aerOut,\
..      				chip0.aerIn,\
..      				chip1.aerIn,\
..      				retina0.aerOut\
..      				],\
..      				)
..      #Monitoring STcs
..      STcsSeq=STChannelAddressing(nChannelBits=[14,15,16],\
..      				stasList=[\
..      				retina0.aerOut,\
..      				chip0.aerIn,\
..      				chip1.aerIn,\
..      				retina0.aerOut,\
..      				retina0.aerOut,\
..      				chip0.aerIn,\
..      				chip1.aerIn,\
..      				retina0.aerOut\
..      				],\
..      				)
..      
..      #Set default STcs for pyAex and pyST
..      setDefaultMonChannelAddress(STcsMon)
..      setDefaultSeqChannelAddress(STcsSeq)
      
.. Don't bother about the retina outputs, they only serve as place holders. This is a quite low-level configuration of pyST. In the near future, a high-level configuration tool will be available, so don't bother learning its syntax now.
.. 
.. *Update* : when using the new ``pyNCS.Setup`` class, the channel setting and configuration of default sequencer/monitor is automatically done.
   
   
6. Now lets create the input. pyST_ uses NeuroTools_. NeuroTools distinguishes spike trains and spike lists. A spike Train is just a list of spike times, whereas the spike list is a list of spike trains with *addressing information included*. The addresses must be given in *logical format*. See the Matlab `Spike Toolbox <http://www.ini.uzh.ch/~dylan/spike_toolbox/>`_ from Dylan Muir for more information about logical addresses.
 
First, create an empty spike list with:

.. code-block:: python
  
   stStim=SpikeList([],id_list=[]) #Init empty SpikeList first

the first argument are the spike times with addresses, the second argument is a list of all the addresses in the chip. You have the choice to initialize them with the spike data, or initialize and empty SpikeList and populated it later. The latter method is more flexible, so we will stick here to that one.

7. Create Poisson spike trains with firing rate of 50Hz from *retina-style addresses* and populate the empty spike list

.. code-block:: python
   
   #This creates the logical addresses: The addresses correspond to row 20 to 30, column 0, polarity 0 of the retina.
   stimulationNeurons=setup.seq[0].addrLogicalConstruct([range(20,30),0,0])

   for i in stimulationNeurons:
       #This creates SpikeTrain objects, which can then be assigned to the spikelist
       stStim[i]=STCreate.poisson_generator(rate=100,t_start=0,t_stop=1000)

You may visualize the spike list with the following command:

.. code-block:: python

   plot_raster(stStim)
   pylab.show()

This should look like:

.. _stStim:
.. figure:: images/fig1.png
	:align:	center

	Example of a stimulation spike list raster plot
	
8. For the moment, the stimulation neurons are "virtual neurons" which are not connected to the chip. For this we have to map the stimulation neurons to the hardware neurons. First, as a precaution, empty the mapping table with:
   
.. code-block:: python
   
   clearAllMappings()
   
9. Running the following will connect the stimulation neurons to the VLSI neurons :

.. code-block:: python

   mapping=list()
   source=setup.seq.addrPhysicalConstruct({0:[range(20,30),0,0]})
   targets=setup.mon.addrPhysicalConstruct({5:[range(20,30),2]})
   for i in source:
       for j in targets:
           mapping.append((i,j))
   setMappings(mapping) #Send the mappings
 
10. You're done with the configuration. Now stimulate the neurons:

.. code-block:: python
   
   stOut=STAEXIO(stStim)

11. Plot the Raster of chip 1. If everything went well, you should see neurons 20 to 30 firing

.. code-block:: python
    
   composite_plot(stOut[1]) #[1] corresponds to channel 1
   pylab.show()
    
       
.. aafig::
    :aspect: 60
    :scale: 150
    :proportional:
    :textual:

    +---------------------------------------------------------------------------+
    | If you are successful with this tutorial please send your figures to emre |
    +---------------------------------------------------------------------------+

12. You can now map the events from one chip to another with:
   
.. code-block:: python

   source =setup.seq.addrPhysicalConstruct({1:[range(20,30)]})
   targets=setup.mon.addrPhysicalConstruct({6:[range(20,30),2]})
   for i in source:
       for j in targets:
           mapping.append((i,j))
   setMappings(mapping)

Note that setMappings by default appends to the present mappings. This is why we did not have to repeat the points in 9.

13. Plot the Raster of chip 2. If everything went well, you should see neurons 20 to 30 firing on the second chip as well

.. code-block:: python
 
   composite_plot(stOut[2]) #[2] corresponds to channel 2
   pylab.show()

.. aafig::
    :aspect: 60
    :scale: 150
    :proportional:
    :textual:

    +---------------------------------------------------------------------------+
    | If you are successful with this tutorial please send your figures to emre |
    +---------------------------------------------------------------------------+

Explanation of (some of) the Biases for IFSLWTA
-----------------------------------------------

**AER (external) synapses**

.. code-block:: python

   ifslwta1.bias.nsynstdw0.v      #Weight of the first excitatory synapse (synapse 2) (range 0 to 0.8)
   ifslwta1.bias.nsynstdw1.v      #Weight of the second excitatory synapse (synapse 3) (range 0 to 0.8)
   ifslwta1.bias.psynaerinhw.v    #Weight of the AER inhibitory synapse (synapse 0 AND synapse 1) (range 2.5 to 3.3)


**local (hard-wired) synapses**

.. code-block:: python

   ifslwta1 bias.nsynlocself.v  #First nearest neighbour excitatory synapse
   ifslwta1 bias.nsynloclat1.v  #First nearest neighbour excitatory synapse
   ifslwta1.bias.nsynloclat2.v  #Second and third nearest Neighbor excitatory synapse (third is half of second)
   ifslwta1.bias.nsynexcinh.v   #Excitatory to inhibitory wieght
   ifslwta1.bias.psynlocinhth.v #Excitatory to inhibitory wieght
   ifslwta1.bias.nlk.v          #Leak bias

.. _NeuroTools: http://neuralensemble.org/trac/NeuroTools
.. _pyST: pyst.html
.. _Emre: mailto:emre(at)ini.phys.ethz.ch
.. _Daniel: mailto:fasnacht(at)sos.phys.ethz.ch
.. _ncs: http://ncs.ethz.ch
